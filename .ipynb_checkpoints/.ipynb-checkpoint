{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GRequests Python Multi Site Web Scraping"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Prepare Websites into Array and Import Required Modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "import grequests\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "urls = [\n",
    "    'http://www.goldbook.ca/barrie-on/c-apparel-accessories/',\n",
    "    'http://www.goldbook.ca/barrie-on/c-community-employment/',\n",
    "    'http://www.goldbook.ca/barrie-on/c-computers-electronics/',\n",
    "    'http://www.goldbook.ca/barrie-on/c-food-drink/',\n",
    "    'http://www.goldbook.ca/barrie-on/c-pets/'\n",
    "]\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run the request code at once and get the response data in the requests object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "rs = (grequests.get(u) for u in urls)\n",
    "requests = grequests.map(rs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get Titles of the different pages that are open"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Barrie  Apparel & Accessories', 'Barrie  Community & Employment', 'Barrie  Computers & Electronics', 'Barrie  Food & Drink', 'Barrie  Pets']\n"
     ]
    }
   ],
   "source": [
    "#Get Titles of all pages\n",
    "def get_main_title(requests):\n",
    "   title_list=[] \n",
    "   for response in requests: \n",
    "        soup = BeautifulSoup(response.text)\n",
    "        title_list.append(soup.select_one(\"span[class*=Head]\").text)\n",
    "        \n",
    "   print(title_list) \n",
    "   return title_list\n",
    "\n",
    "##Call Title Function\n",
    "title_list = get_main_title(requests)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get Sub Categories of all the pages and arrange it into a python dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Barrie  Apparel & Accessories': 'Accessories, Clothing, Jewellery, Kids & Baby, Services, Shoes, Specialty Stores, ', 'Barrie  Community & Employment': 'Career Training, Community, Employment, Federal Government, Local Services, Organizations, Police Services, Religion, Schools, Utilities, ', 'Barrie  Computers & Electronics': 'Communications, Computer Consulting, Computers, Electronics, Internet, Television, Video, ', 'Barrie  Food & Drink': 'Drink, Food, Supplies & Services, ', 'Barrie  Pets': 'Horses, Pets, Vets, '}\n"
     ]
    }
   ],
   "source": [
    "def get_sub_categories(title_list,requests):\n",
    "    count=0\n",
    "    cat_sub_category_dict ={}\n",
    "    for response in requests:\n",
    "        sub_cat_text=\"\"\n",
    "        soup = BeautifulSoup(response.text)\n",
    "        spans = soup.find_all('span', {'class' : 'spnTitle'})\n",
    "        for span in spans:\n",
    "          sub_cat_text=sub_cat_text+span.text+\", \"\n",
    "        cat_sub_category_dict[title_list[count]]=sub_cat_text\n",
    "        count=count+1\n",
    "    print(cat_sub_category_dict)    \n",
    "\n",
    "        \n",
    "get_sub_categories(title_list,requests)        "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
